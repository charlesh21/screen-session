diff --git a/src/comm.c b/src/comm.c
index 5f4af8a..2aded62 100644
--- a/src/comm.c
+++ b/src/comm.c
@@ -58,7 +58,7 @@ struct comm comms[RC_LAST + 1] =
 #endif
   { "allpartial",	NEED_DISPLAY|ARGS_1 },
   { "altscreen",	ARGS_01 },
-  { "at",		ARGS_2|ARGS_ORMORE },
+  { "at",		CAN_QUERY|ARGS_2|ARGS_ORMORE },
 #ifdef COLOR
   { "attrcolor",	ARGS_12 },
 #endif
@@ -194,7 +194,7 @@ struct comm comms[RC_LAST + 1] =
   { "focus",		NEED_DISPLAY|ARGS_01 },
   { "focusminsize",	ARGS_02 },
   { "gr",		NEED_FORE|ARGS_01 },
-  { "group",            NEED_FORE|ARGS_01 },
+  { "group",            CAN_QUERY|NEED_FORE|ARGS_01 },
   { "hardcopy",		NEED_FORE|ARGS_012 },
   { "hardcopy_append",	ARGS_1 },
   { "hardcopydir",	ARGS_01 },
@@ -284,7 +284,7 @@ struct comm comms[RC_LAST + 1] =
   { "resize",		NEED_DISPLAY|ARGS_0|ARGS_ORMORE },
   { "screen",		ARGS_0|ARGS_ORMORE },
 #ifdef COPY_PASTE
-  { "scrollback",	NEED_FORE|ARGS_1 },
+  { "scrollback",	NEED_FORE|ARGS_01 },
 #endif
   { "select",		CAN_QUERY|ARGS_01 },
   { "sessionname",	ARGS_01 },
@@ -313,6 +313,7 @@ struct comm comms[RC_LAST + 1] =
   { "terminfo",		ARGS_23 },
   { "time",		CAN_QUERY|ARGS_01 },
   { "title",		CAN_QUERY|NEED_FORE|ARGS_01 },
+  { "tty",		CAN_QUERY|ARGS_0 },
   { "umask",		ARGS_1|ARGS_ORMORE },
   { "unbindall",	ARGS_0 },
   { "unsetenv",		ARGS_1 },
diff --git a/src/layout.c b/src/layout.c
index 196d10b..93cc3c9 100644
--- a/src/layout.c
+++ b/src/layout.c
@@ -33,6 +33,7 @@
 
 extern struct display *display;
 extern int captionalways;
+extern int focusminwidth, focusminheight;
 
 struct layout *layouts;
 struct layout *laytab[MAXLAY];
@@ -166,6 +167,8 @@ struct canvas *cv;
     }
   while (D_canvas.c_slperp)
     FreeCanvas(D_canvas.c_slperp);
+  focusminwidth = lay->lay_focusminwidth;
+  focusminheight = lay->lay_focusminheight;
   D_cvlist = 0;
   D_forecv = lay->lay_forecv;
   DupLayoutCv(&lay->lay_canvas, &D_canvas, 0);
diff --git a/src/layout.h b/src/layout.h
index 065edb7..3b79b0c 100644
--- a/src/layout.h
+++ b/src/layout.h
@@ -43,6 +43,8 @@ struct layout
   struct canvas   *lay_forecv;
   struct canvas   *lay_cvlist;
   int              lay_autosave;
+  int              lay_focusminwidth;
+  int              lay_focusminheight;
 };
 
 extern void  AutosaveLayout __P((struct layout *));
diff --git a/src/process.c b/src/process.c
index da9188d..37f67e9 100644
--- a/src/process.c
+++ b/src/process.c
@@ -2661,6 +2661,15 @@ int key;
       MakeTermcap((display == 0));
       debug("new termcap made\n");
       break;
+    case RC_TTY:
+      if(fore) {
+          char buf[256];
+          OutputMsg(0, "%s", fore->w_tty);
+      }
+      else
+          OutputMsg(0, "none");
+
+      break;
     case RC_ECHO:
       if (!msgok && (!rc_name || strcmp(rc_name, "-X")))
 	break;
@@ -3066,14 +3075,16 @@ int key;
       (void)ParseNum(act, &nwin_default.histheight);
       break;
     case RC_SCROLLBACK:
-      if (flayer->l_layfn == &MarkLf)
-	{
-	  OutputMsg(0, "Cannot resize scrollback buffer in copy/scrollback mode.");
-	  break;
-	}
-      (void)ParseNum(act, &n);
-      ChangeWindowSize(fore, fore->w_width, fore->w_height, n);
-      if (msgok)
+    if (*args != 0)
+	    {
+	  if (flayer->l_layfn == &MarkLf)
+	    {
+	      OutputMsg(0, "Cannot resize scrollback buffer in copy/scrollback mode.");
+	      break;
+	    }
+	  (void)ParseNum(act, &n);
+	  ChangeWindowSize(fore, fore->w_width, fore->w_height, n);
+      }
 	OutputMsg(0, "scrollback set to %d", fore->w_histheight);
       break;
 #endif
@@ -4209,19 +4220,21 @@ int key;
 	  else
             focusminheight = n;
 	}
-      if (msgok)
-	{
-	  char b[2][20];
-	  for (i = 0; i < 2; i++)
-	    {
-	      n = i == 0 ? focusminwidth : focusminheight;
-	      if (n == -1)
-		strcpy(b[i], "max");
-	      else
-		sprintf(b[i], "%d", n);
-	    }
-          OutputMsg(0, "focus min size is %s %s\n", b[0], b[1]);
-	}
+	char b[2][20];
+	for (i = 0; i < 2; i++)
+	  {
+	    n = i == 0 ? focusminwidth : focusminheight;
+	    if (n == -1)
+	      strcpy(b[i], "max");
+	    else
+	      sprintf(b[i], "%d", n);
+	  }
+	if (D_layout)
+	  {
+	    D_layout->lay_focusminwidth = focusminwidth;
+	    D_layout->lay_focusminheight = focusminheight;
+	  }
+        OutputMsg(0, "focus min size is %s %s\n", b[0], b[1]);
       break;
     case RC_GROUP:
       if (*args)
@@ -4237,13 +4250,10 @@ int key;
 	  WindowChanged((struct win *)0, 'W');
 	  WindowChanged((struct win *)0, 0);
 	}
-      if (msgok)
-	{
-	  if (fore->w_group)
-	    OutputMsg(0, "window group is %d (%s)\n", fore->w_group->w_number, fore->w_group->w_title);
-	  else
-	    OutputMsg(0, "window belongs to no group");
-	}
+    if (fore->w_group)
+      OutputMsg(0, "window group is %d (%s)\n", fore->w_group->w_number, fore->w_group->w_title);
+    else
+      OutputMsg(0, "window belongs to no group");
       break;
     case RC_LAYOUT:
       if (!strcmp(args[0], "title"))
