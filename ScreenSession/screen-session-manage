#!/usr/bin/env python
# file: screen-session-manage
# author: Artur Skonecki
# website: http://adb.cba.pl
# description: sessions manager with preview in split window

import commands, os, re, sys,time,tempfile,pwd,mmap
import GNUScreen as sc
import util

def menu_tmp():
    # taken from byobu
    PREFIX = "/usr"
    SHELL = os.getenv("SHELL", "/bin/zsh")
    choice = ""
    sessions = []
    text = []
    i = 0
    output = commands.getoutput('screen -ls ')
    if output:
        for s in output.split("\n"):
            s = re.sub(r'\s+', ' ', s)
            if s.find(" ") == 0 and len(s) > 1:
                text.append(s)
                items = s.split(" ")
                sessions.append(items[1])
                i += 1
    command=None
    inputstring=None
    if i > 1:
        sys.stdout.write("\nGNU Screen sessions...\n\n")
        tries = 0
        while tries < 3:
            i = 1
            for s in text:
                sys.stdout.write("  %d. %s\n" % (i, s))
                i += 1
            sys.stdout.write("  %d.  Create a new session\n" % i)
            i += 1
            try:
                command=None
                inputstring=None
                inputstring = raw_input("\nChoose 1-%d [1]: " % (i-1))
                if inputstring:
                    try:
                        choice=int(inputstring)
                        if choice >= 0 and choice < i:
                            break
                    except:
                        command=inputstring
                        break
                else:
                    return "enter"
            except KeyboardInterrupt:
                command='quit'
                print ('panic!')
                return command
                break
            except:
                if choice == "":
                    choice = 1
                    break
                tries += 1
                choice = ""
                sys.stderr.write("\nERROR: Invalid input\n");

    if inputstring:
        if command:
            return command
        if choice==0:
            # Create a new session
            return "quit"
        elif choice == i-1:
            return "new"
            os.execv(PREFIX+"/bin/screen", ["", SHELL])
        else:
            # Attach to the chosen session; must use the 'screen' binary
            return "attach "+sessions[choice-1]

    # No valid selection, default to the youngest session, create if necessary
    #os.execv(PREFIX+"/bin/byobu", ["", "-AOxRR"])


def prime(fifoname):
    l1=sc.get_session_list()
    os.popen('screen -S "MANAGER_NOATTACH" -m -d -c /dev/null %s %s %s'%(sys.argv[0],'ui',fifoname))
    l2=sc.get_session_list()
    session=sc.find_new_session(l1,l2)
    print ('session: %s'%session)
    return session

def ui2(fifoname):
    sys.stderr=open('/tmp/scs_logicerr_ui2','w')
    print('ui2 [%s]'%fifoname)
    pipein = open(fifoname, 'r')                 # open fifo as stdio object
    while 1:
        line = pipein.readline( )[:-1]            # blocks until data sent
        print(line)
        #print 'Parent %d got "%s" at %s' % (os.getpid(), line, time.time( ))

ui2pipe=None
def ui2out(pipeout,line):
    os.write(pipeout,'%s\n'%line)
    pass

def print2ui(line):
    global ui2pipe
    os.write(ui2pipe,'%s\n'%line)
    pass

usagestr='\n===HELP===\n\
ALT + T - toggle between regions\n\
h[elp] - show this message\n\
a[ttach] <sessionname> - attach to session\n\
name <sessionname> - rename a session\n\
new - create new session\n\
kill - kill selected session\n\
w[ipe] - wipe dead sessions\n\
q[uit[ - exit session manager\n\
r[reset] - reset session manager\n\
l[ayout] - toggle layout\n\
e[nter] - enter into last selected session\n\
'

def usage():
    print2ui(usagestr)

def reset_tui():
    pass

def reset_tui_1(scs):
    scs.only()
    scs.split('-v')
    scs.split()
    time.sleep(0.1)
    scs.focus('top')
    scs.select('0')
    scs.focus()
    scs.select('1')
    scs.focus('top')

    dinfo=scs.dinfo()
    term_x,term_y=int(dinfo[0]),int(dinfo[1])
    reg_x=None
    reg_y=None
    if(term_x>100):
        reg_x=49
    if(term_y>30):
        reg_y=term_y-15
    if reg_x:
        scs.resize('-h %d'%reg_x)
    if reg_y:
        scs.resize('-v %d'%reg_y)
def reset_tui_3(scs):
    scs.only()
    scs.split()
    scs.split('-v')
    time.sleep(0.1)
    scs.focus('top')
    scs.select('0')
    scs.focus()
    scs.select('1')
    scs.focus('top')
def reset_tui_2(scs):
    scs.only()
    scs.split('-v')
    time.sleep(0.1)
    scs.focus('top')
    scs.select('0')
    
    dinfo=scs.dinfo()
    term_x,term_y=int(dinfo[0]),int(dinfo[1])
    reg_x=None
    if(term_x>100):
        reg_x=49
    if reg_x:
        scs.resize('-h %d'%reg_x)
def reset_tui_4(scs):
    scs.only()
    scs.split()
    time.sleep(0.1)
    scs.focus('top')
    scs.select('0')

def logic(scs,fifoname,fifoname2,session,psession):
    global reset_tui
    ret=None
    reset_tui=reset_tui_1
    global ui2pipe
    sys.stdout=open('/tmp/scs_logicout','w')
    sys.stderr=open('/tmp/scs_logicerr_logic','w')
    #os.system('screen -X split -v')
    print 'run opening [%s]'%fifoname
    pipein = open(fifoname, 'r')
    print 'run printing'
    sys.stderr.write("%s %s %s\n"%(sys.argv[0],'ui2',fifoname2))
    sys.stdout.flush()
    scs.screen("%s %s %s"%(sys.argv[0],'ui2',fifoname2))
    pipeout = os.open(fifoname2, os.O_WRONLY)
    ui2pipe=pipeout
    sys.stdout=os.fdopen(pipeout,'w')
    reset_tui(scs)
    usage()
    #usage()
    last_session=None
    mode=None
    try:
        while 1:

            line = pipein.readline()[:-1]            # blocks until data sent
            if not line:
                break;
            else:
                if line:
                    print2ui('UI: %s'%line)
                ret=None                
                e=eval_command(scs,line,last_session,psession)
                if e:
                    try:
                        if e[1]:
                            if e[1]=='\0':
                                last_session=None
                            else:
                                last_session=e[1]
                            print2ui('LOGIC: select %s'%last_session)
                    except:
                        pass
                    try:
                        if e[0]:
                            mode=e[0]
                    except:
                        pass
                    if (mode and mode!="enter") or (mode=='enter' and last_session):
                        raise SystemExit
                    else:
                        mode=None

    except SystemExit:
        pipein.close()
        scs.quit()
        return mode+';'+str(last_session)+';'

def eval_command(scs,command,last_session,psession):
    global reset_tui
    command=command.split(' ',1)
    mode=command[0]
    if len(command)>1:
        args=[]
        for arg in command[1].split(' '):
            args.append(arg)
    else:
        args=['']


    if mode.startswith('a'): # attach
        #print2ui('LOGIC: attaching \"%s\"'%args[0])

        scs.focus('bottom')
        cnum=scs.get_number_and_title()[0]
        if psession and psession==args[0]:
            print2ui('LOGIC: parent session is [%s]'%psession)
            print2ui('LOGIC: Unable to attach loop detected')
        else:
            scs.screen('screen -x \"%s\"'%args[0])
            scs.title(args[0])
        if int(cnum)>1:
            print2ui('logic: killing window \"%s\"'%cnum)
            scs.kill(cnum)
        scs.focus('top')
        return None,args[0]
    if mode.startswith('d'): # deselect
        print2ui('LOGIC: deselecting' )
        scs.focus('bottom')
        scs.select('-')
        scs.focus('top')
        return None,'\0'
    elif mode=='kill':
        if last_session:
            print2ui('LOGIC: killing session \"%s\"'%last_session)
            scs=ScreenSaver(last_session,'/dev/null','/dev/null')
            scs.quit()
    elif mode.startswith('q'): # quit
        print2ui('LOGIC: quiting...' )
        return 'quit',None
    elif mode.startswith('h'): # help
        usage()
    elif mode.startswith('e'): # enter
        return 'enter',None
    elif mode.startswith('r'): # reset
        print2ui('LOGIC: reseting')
        return 'reset',None
    elif mode.startswith('l'): # layout
        print2ui('LOGIC: toggling layout')
        scs.focus('bottom')
        cnum=scs.get_number_and_title()[0]
        if int(cnum)>1:
            print2ui('logic: killing window \"%s\"'%cnum)
            scs.kill(cnum)
        scs.focus('top')
        cnum=scs.get_number_and_title()[0]
        if reset_tui==reset_tui_1:
            reset_tui=reset_tui_2
        elif reset_tui==reset_tui_2:
            reset_tui=reset_tui_3
        elif reset_tui==reset_tui_3:
            reset_tui=reset_tui_1
        '''
        elif reset_tui==reset_tui_4:
            reset_tui=reset_tui_1
        '''
        reset_tui(scs)
    elif mode.startswith('w'): # wipe
        print2ui('LOGIC: wiping out dead sessions')
        scs.wipe()
    elif mode.startswith('new'): # new
        print2ui('LOGIC: creating new session \"%s\"'%args[0])
        return 'new',args[0]
    elif mode.startswith('name'): # new
        print2ui('LOGIC: renaming session to \"%s\"'%args[0])
        scs=ScreenSaver(last_session,'/dev/null','/dev/null')
        scs.sessionname(args[0])


def ui1(fifoname):
    sys.stderr=open('/tmp/scs_logicerr_ui','w')
    print 'ui [%s]'%fifoname
    pipeout = os.open(fifoname, os.O_WRONLY)
    selection=''
    while selection!=None:
        selection=menu_tmp()
        os.system('clear')
        if selection:
            os.write(pipeout,'%s\n'%selection)
    #os.close(pipeout)

       
def attach_session(session):
    os.popen('screen -x \"%s\"'%(session))
    
if __name__=='__main__':
    if sys.argv[1]=='p':
        sys.stderr=open('/tmp/scs_logicerr','w')
        try:
            psession=sys.argv[2]
        except:
            psession=None

        tmpdir=os.path.join(tempfile.gettempdir(),'screen-sessions-'+pwd.getpwuid(os.geteuid())[0] )
        if not os.path.exists(tmpdir):
            os.makedirs(tmpdir)
        #files may get deleted by screen-session need to prevent
        fifoname=os.path.join(tmpdir,'__manager_%s_ui'%os.getpid())
        fifoname2=os.path.join(tmpdir,'__manager_%s_ui2'%os.getpid())
       
        if not os.path.exists(fifoname):
            os.mkfifo(fifoname)
        if not os.path.exists(fifoname2):
            os.mkfifo(fifoname2)
        from ScreenSaver import ScreenSaver
        while True:
            session=prime(fifoname)
            scs=ScreenSaver(session,'/dev/null','/dev/null')
            scs.command_at('rendition so kw')
            scs.command_at('bindkey ^[t focus prev')
            scs.command_at('bindkey ^[T focus prev')
            scs.source(os.path.join(os.getenv('HOME'),'.screenrc_MANAGER'))
            data=mmap.mmap(-1,100)
            pid=os.fork()
            if pid==0:
                command=logic(scs,fifoname,fifoname2,session,psession)
                for i,c in enumerate(command):
                    data[i]=c
                break
            else:
                attach_session(session)
                os.waitpid(pid,0)
                command=data.readline().strip()
                try:
                    command=command.split(';')
                    '''
                    for m in command:
                        print('[]%d|mode=%s'%(len(m),m))
                    '''
                except:
                    pass

                if command[0]=='enter':
                    print ("entering \"%s\""%(command[1]))
                    attach_session(command[1])
                elif command[0]=='reset':
                    pass
                elif command[0]=='new':
                    print ("creating session \"%s\""%(command[1]))
                    os.popen('screen -m')
                    
                else:
                    try:
                        os.remove(fifoname)
                    except:
                        pass
                    try:
                        os.remove(fifoname2)
                    except:
                        pass
                    break


    elif sys.argv[1]=='ui':
        fifoname=sys.argv[2]
        ui1(fifoname)
    elif sys.argv[1]=='ui2':
        fifoname=sys.argv[2]
        ui2(fifoname)
