#!/usr/bin/env python
# file: screen-session-manage
# author: Artur Skonecki
# website: http://adb.cba.pl
# description: sessions manager with preview in split window

import commands, os, re, sys,time,tempfile,pwd,mmap
import GNUScreen as sc
import util

def menu_tmp():
    PREFIX = "/usr"
    SHELL = os.getenv("SHELL", "/bin/zsh")
    choice = ""
    sessions = []
    text = []
    i = 0
    output = commands.getoutput('screen -ls ')
    if output:
        for s in output.split("\n"):
            s = re.sub(r'\s+', ' ', s)
            if s.find(" ") == 0 and len(s) > 1:
                text.append(s)
                items = s.split(" ")
                sessions.append(items[1])
                i += 1
    command=None
    inputstring=None
    if i > 1:
        sys.stdout.write("\nGNU Screen sessions...\n\n")
        tries = 0
        while tries < 3:
            i = 1
            for s in text:
                sys.stdout.write("  %d. %s\n" % (i, s))
                i += 1
            sys.stdout.write("  %d.  Create a new session\n" % i)
            i += 1
            try:
                command=None
                inputstring=None
                inputstring = raw_input("\nChoose 1-%d [1]: " % (i-1))
                try:
                    choice=int(inputstring)
                    print('shit %s'%choice)
                    if choice >= 0 and choice < i:
                        break
                except:
                    command=inputstring
                    break
            except KeyboardInterrupt:
                command='quit'
                print ('panic!')
                return command
                break;
            except:
                if choice == "":
                    choice = 1
                    break
                tries += 1
                choice = ""
                sys.stderr.write("\nERROR: Invalid input\n");

    if inputstring:
        if command:
            return command
        if choice==0:
            # Create a new session
            return "quit"
        elif choice == i-1:
            os.execv(PREFIX+"/bin/screen", ["", SHELL])
        else:
            # Attach to the chosen session; must use the 'screen' binary
            return "attach "+sessions[choice-1]
            os.execv(PREFIX+"/bin/screen", ["", "-AOxRR", sessions[choice-1]])

    # No valid selection, default to the youngest session, create if necessary
    #os.execv(PREFIX+"/bin/byobu", ["", "-AOxRR"])


def prime(fifoname):
    l1=sc.get_session_list()
    os.popen('screen -m -d -c /a/.screenrc_screensession %s %s %s'%(sys.argv[0],'ui',fifoname))
    l2=sc.get_session_list()
    session=sc.find_new_session(l1,l2)
    print ('session: %s'%session)
    return session

def ui2(fifoname):
    print('ui2 transmitting through %s'%fifoname)
    usage_print()
    pipein = open(fifoname, 'r')                 # open fifo as stdio object
    while 1:
        line = pipein.readline( )[:-1]            # blocks until data sent
        print(line)
        #print 'Parent %d got "%s" at %s' % (os.getpid(), line, time.time( ))

ui2pipe=None
def ui2out(pipeout,line):
    os.write(pipeout,'%s\n'%line)
    pass

def print2ui(line):
    global ui2pipe
    os.write(ui2pipe,'%s\n'%line)
    pass

usagestr='Escape: \n\
Commands:\n\
help - show this message\n\
quit - exit session manager'

def usage_print():
    print(usagestr)
def usage():
    print2ui(usagestr)

def logic(scs,fifoname,fifoname2,session):
    ret=None
    global ui2pipe
    sys.stdout=open('/tmp/scs_logicout','w')
    sys.stderr=sys.stdout
    #os.system('screen -X split -v')
    print 'run opening [%s]'%fifoname
    pipein = open(fifoname, 'r')
    print 'run printing'
    scs.split('-v')
    scs.split()
    time.sleep(0.1)
    scs.focus()
    scs.screen("%s %s %s"%(sys.argv[0],'ui2',fifoname2))
    pipeout = os.open(fifoname2, os.O_WRONLY)
    ui2pipe=pipeout
    sys.stdout=os.fdopen(pipeout,'w')
    print2ui('test test')
    #usage()
    scs.focus('top')
    last_session=None
    try:
        while 1:

            line = pipein.readline()[:-1]            # blocks until data sent
            if not line:
                break;
            else:
                print2ui('UI: %s'%line)
                ret=None                
                e=eval_command(scs,line)
                if e[1]:
                    last_session=e[1]
                if e[0]:
                    ret=e[0],last_session
                    raise SystemExit

    except SystemExit:
        pipein.close()
        scs.quit()
        return ret 

def eval_command(scs,command):
    command=command.split(' ',1)
    mode=command[0]
    if len(command)>1:
        args=[]
        for arg in command[1].split(' '):
            args.append(arg)
    else:
        args=None
    if mode=='attach':
        scs.focus('bottom')
        scs.screen('screen -x %s'%args[0])
        cnum=scs.get_number_and_title()[0]
        scs.focus('top')
        return False,args[0]
    elif mode=='kill':
        scs.kill('',args[0])
    elif mode=='quit':
        raise SystemExit
    elif mode=='help':
        usage()
    elif mode.startswith('e'):
        return True,None
        


def ui1(fifoname):
    print 'start opening [%s]'%fifoname
    pipeout = os.open(fifoname, os.O_WRONLY)
    selection=''
    print 'start selecting'
    while selection!=None:
        selection=menu_tmp()
        if selection:
            os.write(pipeout,'%s\n'%selection)
    #os.close(pipeout)

       
def attach_session(session):
    os.popen('screen -x %s'%(session))
    
if __name__=='__main__':
    if sys.argv[1]=='p':
        tmpdir=os.path.join(tempfile.gettempdir(),'screen-sessions-'+pwd.getpwuid(os.geteuid())[0] )
        if not os.path.exists(tmpdir):
            os.makedirs(tmpdir)
        #this may get cleared by screen-session need to prevent
        fifoname=os.path.join(tmpdir,'__manager_%s'%os.getpid())
        fifoname2=os.path.join(tmpdir,'__manager_%s_ui2'%os.getpid())
       
        if not os.path.exists(fifoname):
            os.mkfifo(fifoname)
        if not os.path.exists(fifoname2):
            os.mkfifo(fifoname2)
        from ScreenSaver import ScreenSaver
        while True:
            session=prime(fifoname)
            scs=ScreenSaver(session,'/dev/null','/dev/null')
            data=mmap.mmap(-1,100)
            pid=os.fork()
            if pid==0:
                e=logic(scs,fifoname,fifoname2,session)
                finalsession=e[1]
                for i,c in enumerate(finalsession):
                    data[i]=c

                if finalsession:
                    print ('DONE attaching %s'%final_session)
                    #attach_session(final_session)
            else:
                attach_session(session)
                import time
                os.waitpid(pid,0)
                finalsession=data.readline().split('\0',1)[0]
                if len(finalsession)>1:
                    print "entering \"%s\" %d %s"%(finalsession,len(finalsession),time.ctime())
                    attach_session(finalsession)


    elif sys.argv[1]=='ui':
        fifoname=sys.argv[2]
        ui1(fifoname)
    elif sys.argv[1]=='ui2':
        fifoname=sys.argv[2]
        ui2(fifoname)
