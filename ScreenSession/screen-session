#!/bin/sh
# file: screen-session
# author: Artur Skonecki
# website: http://adb.cba.pl
# description: screen-session tools starter
# it is necessary to run screen_saver.py and some other tools embedded in other screen session to be able to run it in target screen

SCRIPT=$(/bin/echo $0|python -c 'import os,sys;i=sys.stdin.read();print (os.path.realpath(i.strip()))')
SCRIPTPATH=`dirname $SCRIPT`

export PYTHONPATH=$SCRIPTPATH

get_maxwin() {
    maxwin=`python -c "import sys;from ScreenSaver import ScreenSaver; print(ScreenSaver(\"$1\").maxwin())"`
    echo $maxwin
}
MINWIN='0'
bKill=0
waitfor=0
logpipe=1

if [ $# -eq 0 ]; then
    python $SCRIPTPATH/help.py
    exit 1
fi

mode=$1
shift 1 "$@"


if [ $# -ge 1 ]; then
    if [ $1 = "--help" -o $1 = "-h" ]; then
        python $SCRIPTPATH/help.py $mode
        exit 0
    fi
fi

umask 0077

scsfiledir="/tmp/screen-session-$USER"
if [ ! -d "$scsfiledir" ]; then
    mkdir -p $scsfiledir
fi

if [ "$session" = '' ]; then
    session=`python $SCRIPTPATH/sessionname.py`
fi

screen -S $session -X msgminwait 0

if [ $mode = "save" -o $mode = "load" -o $mode = "ls" -o $mode = "other" ]; then
    testargument=`python -c "import sys;from ScreenSaver import ScreenSaver; print(ScreenSaver(\"$session\").exists())"`


    scsfile="$scsfiledir/___scspipe-$$"
    scsfiletmp="$scsfiledir/___scstmp-$$"

    argument0=""
    argument1=""
    argument2=""

    if [ "${testargument}" = "True" ]; then
        argument1="--current-session $session"
    else
        /bin/echo "--- not running inside patched Screen, this session cannot be saved properly"
    fi

    argument2="--special-output $scsfiletmp"


    argument0="logpipe=$scsfile"
    if [ $logpipe -eq 1 ]; then
        if [ -d "$scsfile" ]; then
            rm $scsfile
        fi
        mkfifo $scsfile
        screen -mdc /dev/null python $SCRIPTPATH/screen_saver.py $mode $argument0  $argument1 $argument2 "$@"
        
        cat $scsfile
        rm $scsfile
    else
        python $SCRIPTPATH/screen_saver.py $mode $argument0 $argument1 $argument2 "$@"
    fi

    while read cmd
    do
        if [ "$cmd" = "X" ]; then
            read session
            read maxwin
            read minwin
            read twin
            rm $scsfiletmp
            screen-session kill-group -S $session -M $maxwin -U $minwin $twin
        elif [ "$cmd" = "W" ]; then
            waitfor=1
        fi
    done < $scsfiletmp
else
    shiftcount=0
    # parse command line arguments
    while getopts ":WS:M:U:": OPT; do
        case "$OPT" in
        W)  waitfor=1
            shiftcount=`expr $shiftcount + 1`
            ;;
        S)  session="$OPTARG"
            shiftcount=`expr $shiftcount + 2`
            ;;
        M)  MAXWIN="$OPTARG"
            shiftcount=`expr $shiftcount + 2`
            ;;
        U)  MINWIN="$OPTARG"
            shiftcount=`expr $shiftcount + 2`
            ;;
        esac
    done
    shift $shiftcount "$@"

    if [ "$MAXWIN" = '' ]; then
        MAXWIN=`get_maxwin $session`
    fi

    if [ $mode = "name" ]; then
        python $SCRIPTPATH/sessionname.py $session "$@"

    elif [ $mode = "manager" ]; then
        python $SCRIPTPATH/manager.py p $session

    elif [ $mode = "grab" ]; then
        sh $SCRIPTPATH/screen-session-grab "$@"

    elif [ $mode = "group" ]; then
        sh $SCRIPTPATH/win-to-group $session "$@"

    elif [ $mode = "regions" ]; then
        screen -mdc /dev/null python $SCRIPTPATH/screen-display-regions.py $session "$@"

    elif [ $mode = "nest" ]; then
        screen -mdc /dev/null python $SCRIPTPATH/nest_layout.py $session "$@"

    elif [ $mode = "dir" ]; then
        python $SCRIPTPATH/screen-in-dir.py $$ $session "$@"

    elif [ $mode = "dump" ]; then
        python $SCRIPTPATH/dump.py $session $MAXWIN $MINWIN "$@"

    elif [ $mode = "find-pid" ]; then
        python $SCRIPTPATH/find_pid.py $session $MAXWIN $MINWIN "$@"

    elif [ $mode = "find-file" ]; then
        python $SCRIPTPATH/find_file.py $session $MAXWIN $MINWIN "$@"

    elif [ $mode = "kill" ]; then
        # screen-session kill [signal=TERM] [win=current]
        python $SCRIPTPATH/kill.py $session "$@"

    elif [ $mode = "kill-zombie" ]; then
        python $SCRIPTPATH/kill-zombie.py $session $MAXWIN $MINWIN "$@"

    elif [ $mode = "kill-group" ]; then
        screen -mdc /dev/null python $SCRIPTPATH/kill-group.py $session $MAXWIN $MINWIN "$@"

    elif [ $mode = "renumber" ]; then
        python $SCRIPTPATH/renumber.py $session $MAXWIN $MINWIN "$@"

    elif [ $mode = "sort" ]; then
        python $SCRIPTPATH/sort.py $session $MAXWIN $MINWIN "$@"

    elif [ $mode = "--version" -o $mode = "-v" ]; then
        python $SCRIPTPATH/help.py --version
    else
        python $SCRIPTPATH/help.py
    fi
fi

if [ $waitfor -eq 1 ]; then
    /bin/echo 'Press any key...'
    stty cbreak echo; KEY=$(dd bs=1 count=1 2>/dev/null); stty -cbreak echo
fi
