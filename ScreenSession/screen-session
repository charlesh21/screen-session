#!/bin/sh
# file: screen-session
# author: Artur Skonecki
# website: http://adb.cba.pl
# description: screen-session tools starter
# it is necessary to run screen_saver.py embedded in other screen session to be able to run it from saved/loaded screen session

# Absolute path to this script. /home/user/bin/foo.sh
SCRIPT=$(/bin/echo $0|python -c 'import os,sys;i=sys.stdin.read();print os.path.realpath(i.strip())')
# Absolute path this script is in. /home/user/bin
SCRIPTPATH=`dirname $SCRIPT`

cd $SCRIPTPATH

waitfor=0
nonest=0
logpipe=1

if [ $# -eq 0 ]; then
    python ./help.py
    exit 1
fi

mode=$1
shift 1 $*

# parse command line arguments
while getopts ":WNP:": OPT; do
    case "$OPT" in
    W)  
        waitfor=1
        ;;
    N)  
        logpipe=0
        ;;
    P)  
        logpipe=1
        ;;
    esac
done

if [ $# -ge 1 ]; then
    if [ $1 = "--help" -o $1 = "-h" ]; then
        python ./help.py $mode
        exit 0
    fi
fi

session=`python ./sessionname.py`
if [ $mode = "manager" ]; then
    python ./manager.py p $session

elif [ $mode = "grab" ]; then
    sh ./screen-session-grab $*

elif [ $mode = "regions" ]; then
    screen -m -d -c /dev/null python ./screen-display-regions.py $session $*

elif [ $mode = "regions-helper" ]; then
    sh ./screen-display-regions-helper $*

elif [ $mode = "dir" ]; then
    python ./screen-in-dir.py $$ $session $*
elif [ $mode = "dump" ]; then
    python ./dump.py $session $*

elif [ $mode = "kill" ]; then
    # screen-session kill [signal=TERM] [win=current]
    python ./kill.py $session $*

elif [ $mode = "kill-zombie" ]; then
    maxwin=`screen -X maxwin; screen -Q @lastmsg | python -c "import sys; print(sys.stdin.read().split(':',1)[1].strip())"`
    python ./kill-zombie.py $session $maxwin $*
elif [ $mode = "kill-group" ]; then
    python ./kill-group.py $session $*
elif [ $mode = "kill-current-group" ]; then
    python ./kill-current-group.py $session $*
elif [ $mode = "renumber" ]; then
    maxwin=`screen -X maxwin; screen -Q @lastmsg | python -c "import sys; print(sys.stdin.read().split(':',1)[1].strip())"`
    python ./renumber.py $session $maxwin $*

elif [ $mode = "sort" ]; then
    maxwin=`screen -X maxwin; screen -Q @lastmsg | python -c "import sys; print(sys.stdin.read().split(':',1)[1].strip())"`
    python ./sort.py $session $maxwin $*
elif [ $mode = "name" ]; then
    python ./sessionname.py $*
elif [ $mode = "save" -o $mode = "load" -o $mode = "ls" -o $mode = "other" ]; then
    testargument=`screen -S $session -Q @tty`

    scsfiledir="/tmp/screen-sessions-$USER"
    scsfile="$scsfiledir/___scspipe-$$"

    argument0=""
    argument1=""

    if [ `/bin/echo ${testargument} | grep -c "^/dev"` -eq 1 ]; then
        argument1="--current-session $session"
    else
        /bin/echo "--- not running inside patched Screen, this session cannot be saved properly"
    fi

    argument0="logpipe=$scsfile"
    if [ $logpipe -eq 1 ]; then
        if [ ! -d "$scsfiledir" ]; then
            mkdir $scsfiledir
        fi
        if [ -d "$scsfile" ]; then
            rm $scsfile
        fi
        mkfifo $scsfile
        screen -m -d -c /dev/null python ./screen_saver.py $mode $argument0 $argument1 $* 
        
        cat $scsfile
        rm $scsfile
    else
        python ./screen_saver.py $mode $argument0 $argument1 $*
    fi
else
    python ./help.py
fi

if [ $waitfor -eq 1 ]; then
    /bin/echo 'Press any key...'
    stty cbreak -/bin/echo; KEY=$(dd bs=1 count=1 2>/dev/null); stty -cbreak echo
fi
