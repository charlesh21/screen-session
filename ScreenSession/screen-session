#!/bin/sh
# file: screen-session
# author: Artur Skonecki
# website: http://adb.cba.pl
# description: screen-session tools starter
# it is necessary to run screen_saver.py embedded in other screen session to be able to run it from saved/loaded screen session

# Absolute path to this script. /home/user/bin/foo.sh
SCRIPT=$(/bin/echo $0|python -c 'import os,sys;i=sys.stdin.read();print (os.path.realpath(i.strip()))')
# Absolute path this script is in. /home/user/bin
SCRIPTPATH=`dirname $SCRIPT`

export PYTHONPATH=$SCRIPTPATH

get_maxwin() {
    maxwin=`python -c "import sys;from ScreenSaver import ScreenSaver; print(ScreenSaver(\"$1\").maxwin())"`
    echo $maxwin
}
MINWIN='0'
waitfor=0
nonest=0
logpipe=1

if [ $# -eq 0 ]; then
    python $SCRIPTPATH/help.py
    exit 1
fi

mode=$1
shift 1 "$@"

# parse command line arguments
while getopts ":WNP:S:M:m:": OPT; do
    case "$OPT" in
    W)  waitfor=1
        shift 1 "$@"
        ;;
    N)  logpipe=0
        shift 1 "$@"
        ;;
    P)  logpipe=1
        shift 1 "$@"
        ;;
    S)  session="$OPTARG"
        shift 2 "$@"
        ;;
    M)  MAXWIN="$OPTARG"
        shift 2 "$@"
        ;;
    U)  MINWIN="$OPTARG"
        shift 2 "$@";
        ;;
    esac
done

if [ $# -ge 1 ]; then
    if [ $1 = "--help" -o $1 = "-h" ]; then
        python $SCRIPTPATH/help.py $mode
        exit 0
    fi
fi

umask 0077

scsfiledir="/tmp/screen-session-$USER"
if [ ! -d "$scsfiledir" ]; then
    mkdirhier $scsfiledir
fi

if [ "$session" = '' ]; then
    session=`python $SCRIPTPATH/sessionname.py`
fi

screen -S $session -X msgminwait 0

if [ $mode = "name" ]; then
    python $SCRIPTPATH/sessionname.py $session "$@"

elif [ $mode = "manager" ]; then
    python $SCRIPTPATH/manager.py p $session

elif [ $mode = "grab" ]; then
    sh $SCRIPTPATH/screen-session-grab "$@"

elif [ $mode = "group" ]; then
    sh $SCRIPTPATH/win-to-group $session "$@"

elif [ $mode = "regions" ]; then
    screen -mdc /dev/null python $SCRIPTPATH/screen-display-regions.py $session "$@"

elif [ $mode = "nest" ]; then
    screen -mdc /dev/null python $SCRIPTPATH/nest_layout.py $session "$@"

elif [ $mode = "dir" ]; then
    python $SCRIPTPATH/screen-in-dir.py $$ $session "$@"

elif [ $mode = "dump" ]; then
    python $SCRIPTPATH/dump.py $session "$@"

elif [ $mode = "kill" ]; then
    # screen-session kill [signal=TERM] [win=current]
    python $SCRIPTPATH/kill.py $session "$@"

elif [ $mode = "kill-zombie" ]; then
    if [ "$MAXWIN" = '' ]; then
        MAXWIN=`get_maxwin $session`
    fi
    python $SCRIPTPATH/kill-zombie.py $session $MAXWIN "$@"

elif [ $mode = "kill-group" ]; then
    if [ "$MAXWIN" = '' ]; then
        MAXWIN=`get_maxwin $session`
    fi
    screen -mdc /dev/null python $SCRIPTPATH/kill-group.py $session $MAXWIN "$@"

elif [ $mode = "renumber" ]; then
    if [ "$MAXWIN" = '' ]; then
        MAXWIN=`get_maxwin $session`
    fi
    python $SCRIPTPATH/renumber.py $session $MAXWIN "$@"

elif [ $mode = "sort" ]; then
    if [ "$MAXWIN" = '' ]; then
        MAXWIN=`get_maxwin $session`
    fi
    python $SCRIPTPATH/sort.py $session $MAXWIN "$@"

elif [ $mode = "save" -o $mode = "load" -o $mode = "ls" -o $mode = "other" ]; then
    testargument=`python -c "import sys;from ScreenSaver import ScreenSaver; print(ScreenSaver(\"$session\").exists())"`


    scsfile="$scsfiledir/___scspipe-$$"

    argument0=""
    argument1=""

    if [ "${testargument}" = "True" ]; then
        argument1="--current-session $session"
    else
        /bin/echo "--- not running inside patched Screen, this session cannot be saved properly"
    fi

    if [ "$MAXWIN" = '' ]; then
        MAXWIN=`get_maxwin $session`
    fi

    argument0="logpipe=$scsfile"
    if [ $logpipe -eq 1 ]; then
        if [ -d "$scsfile" ]; then
            rm $scsfile
        fi
        mkfifo $scsfile
        screen -mdc /dev/null python $SCRIPTPATH/screen_saver.py $mode $argument0 -M $MAXWIN $argument1 "$@"
        
        cat $scsfile
        rm $scsfile
    else
        python $SCRIPTPATH/screen_saver.py $mode $argument0 $argument1 -M $MAXWIN "$@"
    fi

elif [ $mode = "--version" -o $mode = "-v" ]; then
    python $SCRIPTPATH/help.py --version
else
    python $SCRIPTPATH/help.py
fi

if [ $waitfor -eq 1 ]; then
    /bin/echo 'Press any key...'
    stty cbreak echo; KEY=$(dd bs=1 count=1 2>/dev/null); stty -cbreak echo
fi
